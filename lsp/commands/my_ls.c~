#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <pthread.h>
#include <semaphore.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/ipc.h> 
#include <sys/msg.h>
#include <sys/shm.h>
#include <dirent.h>
#include <pwd.h>
#include <grp.h>

struct dirent * p ;
DIR *dir ;
struct stat x ;

int check_obj(char *s)
{
	for(int i=0;i<strlen(s);i++)
		if(s[i] == '.')
			return 1;
	return 0;
}

void type_file(char *s)
{
	stat(s,&x);
	if (S_ISREG(x.st_mode)) 
        	printf("-");
    	
       	else if (S_ISDIR(x.st_mode)) 
        	printf("d");
      
       	else if (S_ISCHR(x.st_mode)) 
        	printf("c");
     
	else if (S_ISBLK(x.st_mode)) 
    		printf("b");
       
	else if (S_ISFIFO(x.st_mode)) 
        	printf("p");
     	
	else if (S_ISLNK(x.st_mode)) 
        	printf("l");
     	
	else if (S_ISSOCK(x.st_mode)) 
        	printf("s");
}

void permissions (char *s)
{
	stat(s,&x);
	(x.st_mode & S_IRUSR) ? printf("r") : printf("-");
	
	(x.st_mode & S_IWUSR) ? printf("w") : printf("-");
	
	(x.st_mode & S_IXUSR) ? printf("x") : printf("-");	

	(x.st_mode & S_IRGRP) ? printf("r") : printf("-");
        
        (x.st_mode & S_IWGRP) ? printf("w") : printf("-");
        
        (x.st_mode & S_IXGRP) ? printf("x") : printf("-");
        
	(x.st_mode & S_IROTH) ? printf("r") : printf("-");
        
        (x.st_mode & S_IWOTH) ? printf("w") : printf("-");
        
      	(x.st_mode & S_IXOTH) ? printf("x") : printf("-");
                
	
}

void print_time(char *s)
{
        int f = 0;
        for(int i=0; i<strlen(s) ;i++)
        {
                if(f == 0)
                {
                    if(s[i] == ' ')
                    {
                        f = 1;
                    }
                }

                else if(f == 1)
                {
                        printf("%c",s[i]);
                        if(s[i] == '\n')
                                return;
                }
        }
}

void lss_al(char *s)
{
	if(strlen(s) == 2)
	{
		while((p = readdir(dir)) != NULL)
        	{
			type_file(p->d_name);                     // type of file
			permissions(p->d_name);                   // file permissions
			printf(" ");

			stat(p->d_name,&x);
			printf("%ld ",x.st_nlink);                // no. of hard links

			struct passwd *pw = getpwuid(x.st_uid);   
			struct group *gr = getgrgid(x.st_gid);
			printf("%s ", pw->pw_name);               // file's owner
    			printf("%s ", gr->gr_name);               // file's group

			printf("%ld\t ",x.st_size);               // size of the file

			print_time(ctime(&x.st_mtime));           // print time
			printf("\t");

			printf("%s\n",p->d_name);                 // name of the file
		}
	}
	else if(strlen(s) == 3)
	{

	}
	else
	{
		perror("invalid operator......\n");
		exit(0);
	}
}

void lss()
{
	while((p = readdir(dir)) != NULL)
        {
		if(p->d_name[0] == '.')
			continue;
		if(check_obj(p->d_name))		
                	printf("%s\t",p->d_name);
		else
			printf("%s%s%s\t","\033[0;32m",p->d_name,"\033[0m");
        }

}

int main(int argc,char *argv[])
{
	dir = opendir(".");
	if(argc == 1)
	{
		lss();
		printf("\n");
	}
	else
	{
		lss_al(argv[1]);
		printf("\n");
	}

}
